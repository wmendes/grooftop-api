openapi: 3.0.0
info:
  title: Grooftop API
  description: API for managing rooftop rentals
  version: 1.0.0

servers:
  - url: http://localhost:3000
    description: Development server

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    RegisterDto:
      type: object
      required:
        - email
        - name
        - password
      properties:
        email:
          type: string
          format: email
          example: john@example.com
        name:
          type: string
          example: John Doe
        password:
          type: string
          minLength: 8
          example: password123

    LoginDto:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: john@example.com
        password:
          type: string
          example: password123

    AuthResponse:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...

    UserProfile:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
        avatarUrl:
          type: string
          format: uri
          nullable: true
        createdAt:
          type: string
          format: date-time

    UpdateUserDto:
      type: object
      properties:
        name:
          type: string
          example: John Doe
        avatarUrl:
          type: string
          format: uri
          example: https://example.com/avatar.jpg

    CreateRooftopDto:
      type: object
      required:
        - title
        - description
        - city
        - capacity
        - pricePerHour
        - images
      properties:
        title:
          type: string
          example: Sunset Terrace
        description:
          type: string
          example: Beautiful rooftop with amazing sunset views
        city:
          type: string
          example: New York
        capacity:
          type: integer
          minimum: 1
          example: 20
        pricePerHour:
          type: number
          minimum: 0
          example: 50.0
        images:
          type: array
          items:
            type: string
            format: uri
          example: ['https://example.com/image1.jpg']

    UpdateRooftopDto:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        city:
          type: string
        capacity:
          type: integer
          minimum: 1
        pricePerHour:
          type: number
          minimum: 0
        images:
          type: array
          items:
            type: string
            format: uri

    RooftopResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        city:
          type: string
        capacity:
          type: integer
        pricePerHour:
          type: number
        images:
          type: array
          items:
            type: string
            format: uri
        ownerId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateBookingDto:
      type: object
      required:
        - rooftopId
        - startTime
        - endTime
      properties:
        rooftopId:
          type: string
          format: uuid
          example: 123e4567-e89b-12d3-a456-426614174000
        startTime:
          type: string
          format: date-time
          example: '2024-01-20T14:00:00Z'
        endTime:
          type: string
          format: date-time
          example: '2024-01-20T18:00:00Z'

    UpdateBookingDto:
      type: object
      properties:
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time

    BookingResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        rooftopId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        status:
          type: string
          enum: [PENDING, CONFIRMED, CANCELLED]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateReviewDto:
      type: object
      required:
        - rating
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
          example: 5
        comment:
          type: string
          example: Great rooftop with amazing views!

    UpdateReviewDto:
      type: object
      properties:
        rating:
          type: integer
          minimum: 1
          maximum: 5
        comment:
          type: string

    ReviewResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        rooftopId:
          type: string
          format: uuid
        userId:
          type: string
          format: uuid
        rating:
          type: integer
        comment:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterDto'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Bad request, validation error
        '409':
          description: Email already registered

  /auth/login:
    post:
      tags:
        - Auth
      summary: Login to an existing account
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginDto'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials

  /users/me:
    get:
      tags:
        - Users
      summary: Get current user profile
      operationId: getProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Returns the current user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '401':
          description: Unauthorized

    patch:
      tags:
        - Users
      summary: Update current user profile
      operationId: updateProfile
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
        '400':
          description: Bad request
        '401':
          description: Unauthorized

  /rooftops:
    post:
      tags:
        - Rooftops
      summary: Create a new rooftop
      operationId: createRooftop
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRooftopDto'
      responses:
        '201':
          description: Rooftop created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RooftopResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized

    get:
      tags:
        - Rooftops
      summary: List all rooftops
      operationId: listRooftops
      parameters:
        - name: city
          in: query
          schema:
            type: string
          required: false
          description: Filter rooftops by city
        - name: capacity
          in: query
          schema:
            type: integer
            minimum: 1
          required: false
          description: Filter rooftops by minimum capacity
      responses:
        '200':
          description: Returns list of rooftops
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RooftopResponse'

  /rooftops/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Rooftops
      summary: Get a rooftop by ID
      operationId: getRooftop
      responses:
        '200':
          description: Returns the rooftop
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RooftopResponse'
        '404':
          description: Rooftop not found

    patch:
      tags:
        - Rooftops
      summary: Update a rooftop
      operationId: updateRooftop
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRooftopDto'
      responses:
        '200':
          description: Rooftop updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RooftopResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Rooftop not found

    delete:
      tags:
        - Rooftops
      summary: Delete a rooftop
      operationId: deleteRooftop
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Rooftop deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Rooftop not found

  /rooftops/{rooftopId}/reviews:
    parameters:
      - name: rooftopId
        in: path
        required: true
        schema:
          type: string
          format: uuid
    post:
      tags:
        - Reviews
      summary: Create a new review
      operationId: createReview
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReviewDto'
      responses:
        '201':
          description: Review created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Rooftop not found

    get:
      tags:
        - Reviews
      summary: List reviews for a rooftop
      operationId: listReviews
      responses:
        '200':
          description: Returns list of reviews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReviewResponse'
        '404':
          description: Rooftop not found

  /rooftops/{rooftopId}/reviews/{id}:
    parameters:
      - name: rooftopId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Reviews
      summary: Get a review by ID
      operationId: getReview
      responses:
        '200':
          description: Returns the review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewResponse'
        '404':
          description: Review not found

    patch:
      tags:
        - Reviews
      summary: Update a review
      operationId: updateReview
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateReviewDto'
      responses:
        '200':
          description: Review updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Review not found

    delete:
      tags:
        - Reviews
      summary: Delete a review
      operationId: deleteReview
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Review deleted successfully
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Review not found

  /bookings:
    post:
      tags:
        - Bookings
      summary: Create a new booking
      operationId: createBooking
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBookingDto'
      responses:
        '201':
          description: Booking created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '404':
          description: Rooftop not found

    get:
      tags:
        - Bookings
      summary: List all bookings for the authenticated user
      operationId: listBookings
      security:
        - bearerAuth: []
      parameters:
        - name: rooftopId
          in: query
          schema:
            type: string
            format: uuid
          required: false
          description: Filter bookings by rooftop ID
      responses:
        '200':
          description: Returns list of bookings
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingResponse'
        '401':
          description: Unauthorized

  /bookings/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - Bookings
      summary: Get a booking by ID
      operationId: getBooking
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Returns the booking
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Booking not found

    patch:
      tags:
        - Bookings
      summary: Update a booking
      operationId: updateBooking
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBookingDto'
      responses:
        '200':
          description: Booking updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingResponse'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Booking not found

    delete:
      tags:
        - Bookings
      summary: Cancel a booking
      operationId: cancelBooking
      security:
        - bearerAuth: []
      responses:
        '204':
          description: Booking canceled successfully
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Booking not found
