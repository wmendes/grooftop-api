generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  name      String
  avatarUrl String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  bookings  Booking[]
  bookmarks Bookmark[]
  reviews   Review[]
  rooftops  Rooftop[]
}

model Rooftop {
  id                          String               @id @default(uuid())
  title                       String
  description                 String
  city                        String
  capacity                    Int
  pricePerHour                Float
  images                      String[]
  createdAt                   DateTime             @default(now())
  updatedAt                   DateTime             @updatedAt
  ownerId                     String
  cancellationPolicyId        String?
  bookings                    Booking[]
  bookmarks                   Bookmark[]
  reviews                     Review[]
  cancellationPolicy          CancellationPolicy?  @relation(fields: [cancellationPolicyId], references: [id])
  owner                       User                 @relation(fields: [ownerId], references: [id])
  accessibilityInfrastructure AccessibilityInfra[] @relation("RooftopToAccessibility")
  activities                  RooftopActivity[]    @relation("RooftopToActivity")
  facilities                  RooftopFacility[]    @relation("RooftopToFacility")
  features                    RooftopFeature[]     @relation("RooftopToFeature")
  guidelines                  RooftopGuideline[]   @relation("RooftopToGuideline")
  rentalTypes                 RentalType[]         @relation("RooftopToRentalType")
  viewTypes                   RooftopViewType[]    @relation("RooftopToViewType")
}

model Booking {
  id         String        @id @default(uuid())
  startTime  DateTime
  endTime    DateTime
  totalPrice Float
  status     BookingStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  userId     String
  rooftopId  String
  rooftop    Rooftop       @relation(fields: [rooftopId], references: [id])
  user       User          @relation(fields: [userId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  rooftopId String
  rooftop   Rooftop  @relation(fields: [rooftopId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model RooftopActivity {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  rooftops  Rooftop[] @relation("RooftopToActivity")
}

model RentalType {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  rooftops  Rooftop[] @relation("RooftopToRentalType")
}

model AccessibilityInfra {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  rooftops  Rooftop[] @relation("RooftopToAccessibility")
}

model RooftopFeature {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  rooftops  Rooftop[] @relation("RooftopToFeature")
}

model RooftopFacility {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  rooftops  Rooftop[] @relation("RooftopToFacility")
}

model RooftopViewType {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  rooftops  Rooftop[] @relation("RooftopToViewType")
}

model RooftopGuideline {
  id        String    @id @default(uuid())
  guideline String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  rooftops  Rooftop[] @relation("RooftopToGuideline")
}

model CancellationPolicy {
  id          String    @id @default(uuid())
  policyName  String
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  rooftops    Rooftop[]
}

model Bookmark {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  rooftopId String
  rooftop   Rooftop  @relation(fields: [rooftopId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, rooftopId])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELED
}
